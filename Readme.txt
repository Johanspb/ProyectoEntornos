# üì¶ Zelev Inventario - Sistema de Gesti√≥n de Pedidos y Unidades

Este proyecto es una aplicaci√≥n desarrollada con **Spring Boot** que permite gestionar pedidos, unidades de inventario, art√≠culos y usuarios. Est√° dise√±ado para funcionar como el backend de un sistema de gesti√≥n de inventario con pedidos personalizados y control de stock.

## üöÄ Tecnolog√≠as utilizadas

- Java 17
- Spring Boot 3.x
- Spring Data JPA
- MySQL
- Hibernate
- Jackson (para serializaci√≥n JSON)
- Maven

## üß± Arquitectura y dise√±o

La aplicaci√≥n sigue una arquitectura MVC y utiliza JPA para mapear entidades a una base de datos relacional.

### üìÑ Entidades principales

- `Usuario`: Puede ser cliente o empleado.
- `Unidad`: Representa una unidad de producto disponible para la venta.
- `Pedido`: Contiene la informaci√≥n del pedido realizado por un cliente y atendido por un empleado.
- `PediUnid`: Entidad intermedia que conecta `Pedido` y `Unidad`, permitiendo pedidos con m√∫ltiples unidades (relaci√≥n Many-to-Many con atributos adicionales como `cantidad`).
- `Articulo`: Categoriza las unidades (ej. tipo de producto, marca, etc).

### üîÅ Relaciones entre entidades

- Un **Pedido** puede tener muchas **Unidades** (a trav√©s de `PediUnid`).
- Una **Unidad** puede estar en muchos **Pedidos**.
- Un **Usuario** puede ser cliente o empleado en muchos pedidos.

### üåê Endpoints principales

üßæ Pedidos
M√©todo	Endpoint	Descripci√≥n
GET	/api/pedidos	Lista todos los pedidos
GET	/api/pedidos/{id}	Obtiene un pedido por ID
POST	/api/pedidos	Crea un nuevo pedido
PUT	/api/pedidos	Actualiza un pedido existente
PUT	/api/pedidos/{id}/estado	Cambia el estado de un pedido
GET	/api/pedidos/{id}/unidades	Obtiene las unidades asociadas a un pedido
POST	/api/pedidos/{id}/agregar-unidad/{upc}	Agrega una unidad a un pedido
üì¶ Unidades
M√©todo	Endpoint	Descripci√≥n
GET	/api/unidades	Lista todas las unidades
GET	/api/unidades/{upc}	Obtiene una unidad por UPC
POST	/api/unidades	Crea una nueva unidad
PUT	/api/unidades/{upc}	Actualiza una unidad
DELETE	/api/unidades/{upc}	Elimina una unidad
PUT	/api/unidades/{upc}/estado	Cambia el estado de una unidad
üìÅ Art√≠culos
M√©todo	Endpoint	Descripci√≥n
GET	/api/articulos	Lista todos los art√≠culos
GET	/api/articulos/{id}	Obtiene un art√≠culo por ID
POST	/api/articulos	Crea un nuevo art√≠culo
PUT	/api/articulos/{id}	Actualiza un art√≠culo existente
GET	/api/articulos/{id}/categorias	Obtiene las categor√≠as de un art√≠culo
POST	/api/articulos/{idArticulo}/categorias/{idCategoria}	Asocia una categor√≠a a un art√≠culo
üìö Categor√≠as
M√©todo	Endpoint	Descripci√≥n
GET	/api/categorias	Lista todas las categor√≠as
GET	/api/categorias/{id}	Obtiene una categor√≠a por ID
POST	/api/categorias	Crea una nueva categor√≠a
PUT	/api/categorias/{id}	Actualiza una categor√≠a existente
DELETE	/api/categorias/{id}	Elimina una categor√≠a
GET	/api/categorias/{id}/articulos	Obtiene los art√≠culos de una categor√≠a
üë• Usuarios
M√©todo	Endpoint	Descripci√≥n
GET	/api/usuarios	Lista todos los usuarios
GET	/api/usuarios/{cedula}	Obtiene un usuario por c√©dula
POST	/api/usuarios	Crea un nuevo usuario
PUT	/api/usuarios/{cedula}	Actualiza un usuario
DELETE	/api/usuarios/{cedula}	cambia a estado inactivo
GET	/api/usuarios/{cedula}/roles	Lista los roles de un usuario
POST	/api/usuarios/{cedula}/roles/{idRol}	Asocia un rol a un usuario
GET	/api/usuarios/estado/{estado}	Busca usuarios por estado
## ‚öôÔ∏è Configuraci√≥n

1. Clona el repositorio
2. Configura tu archivo `application.properties`:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/zelev_bd
spring.datasource.username=tu_usuario
spring.datasource.password=tu_contrase√±a
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

